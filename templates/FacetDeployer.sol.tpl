// SPDX-License-Identifier: MIT
pragma solidity ^0.8.29;

/*
 * ⚠️  DO NOT EDIT THIS FILE MANUALLY ⚠️
 *
 * This file is auto-generated by scripts/generate_deployers.py
 * Any manual changes will be overwritten on the next build.
 *
 * To modify this contract:
 * 1. Edit the template: scripts/templates/FacetDeployer.sol.tpl
 * 2. Update configuration: scripts/contracts.json
 * 3. Regenerate: python3 scripts/generate_deployers.py
 */

import {ICreateX} from "@interfaces/ICreateX.sol";
import {IDiamond, IDiamondCut, FacetCut, FacetCutAction} from "@interfaces/IDiamond.sol";
import {{{CONTRACT_NAME}}} from "@facets/{{CONTRACT_NAME}}.sol";

/**
 * @title {{CONTRACT_NAME}}Deployer
 * @notice Self-destructing deployer for {{CONTRACT_NAME}}
 * @dev Deploys {{CONTRACT_NAME}} via CreateX, cuts it into diamond, then self-destructs
 */
contract {{CONTRACT_NAME}}Deployer {
    ICreateX constant CREATEX = ICreateX(0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed);
    IDiamondCut constant DIAMOND = IDiamondCut({{DIAMOND_ADDRESS}});
    bytes32 constant SALT = {{SALT}};
    address constant EXPECTED_ADDR = {{EXPECTED_ADDRESS}};

    constructor() {
        // Deploy the facet
        address deployed = CREATEX.deployCreate3(SALT, type({{CONTRACT_NAME}}).creationCode);
        require(deployed == EXPECTED_ADDR, "{{CONTRACT_NAME}} deployment address mismatch");
        require(deployed != address(0), "{{CONTRACT_NAME}} deployment failed");

        // Create selector array
        {{SELECTOR_ARRAY_CREATION}}

        // Cut the facet into the diamond
        FacetCut[] memory cuts = new FacetCut[](1);
        cuts[0] = FacetCut({
            facetAddress: deployed,
            action: FacetCutAction.Add,
            functionSelectors: selectors
        });

        DIAMOND.diamondCut(cuts, address(0), "");

        selfdestruct(payable(msg.sender));
    }
}
