// SPDX-License-Identifier: MIT
pragma solidity ^0.8.29;

/*
 * ⚠️  DO NOT EDIT THIS FILE MANUALLY ⚠️
 *
 * This file is auto-generated by scripts/generate_deployers.py
 * Any manual changes will be overwritten on the next build.
 *
 * To modify this script:
 * 1. Edit the template: templates/DiamondDeployerScript.s.sol.tpl
 * 2. Update configuration: scripts/contracts.json
 * 3. Regenerate: python3 scripts/generate_deployers.py
 */

import {Script} from "forge-std/Script.sol";
import {console} from "forge-std/console.sol";
import {ICreateX} from "@interfaces/ICreateX.sol";
import {BTRDiamond} from "@/BTRDiamond.sol";
import {BTR} from "@/BTR.sol";
import {IDiamond, IDiamondCut, FacetCut, FacetCutAction} from "@interfaces/IDiamond.sol";
import {CoreAddresses} from "@/BTRTypes.sol";
{{FACET_IMPORTS}}

/*
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@/         '@@@@/            /@@@/         '@@@@@@@@
 * @@@@@@@@/    /@@@    @@@@@@/    /@@@@@@@/    /@@@    @@@@@@@
 * @@@@@@@/           _@@@@@@/    /@@@@@@@/    /.     _@@@@@@@@
 * @@@@@@/    /@@@    '@@@@@/    /@@@@@@@/    /@@    @@@@@@@@@@
 * @@@@@/            ,@@@@@/    /@@@@@@@/    /@@@,    @@@@@@@@@
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *
 * @title DiamondDeployer Script - Modular deployment script with embedded logic
 * @copyright 2025
 * @notice Script wrapper that handles broadcasting and chain detection with embedded deployment logic
 * @dev Uses environment variables DEPLOYER_PK for private key, directly deploys all contracts
 * @author BTR Team
 */

contract DiamondDeployerScript is Script {
    ICreateX constant CREATEX = ICreateX(0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed);

    function run() external {
        // Get deployer from environment
        address deployer = vm.envAddress("DEPLOYER");
        address treasury = deployer; // Use deployer as treasury for simplicity

        // Get private key from environment
        uint256 deployerPk = vm.envUint("DEPLOYER_PK");

        vm.startBroadcast(deployerPk);

        console.log("Starting BTR Diamond deployment...");
        console.log("Deployer:", deployer);
        console.log("Treasury:", treasury);

        // Deploy BTR token first
        console.log("Deploying BTR token...");
        address tokenAddr = CREATEX.deployCreate3(
            {{BTR_SALT}},
            abi.encodePacked(
                type(BTR).creationCode,
                abi.encode("BTR Token", "BTR", deployer)
            )
        );
        require(tokenAddr == {{BTR_EXPECTED_ADDRESS}}, "BTR token address mismatch");
        console.log("BTR deployed at:", tokenAddr);

        // Create initial cuts array
        FacetCut[] memory initialCuts = new FacetCut[]({{FACET_COUNT}});
        uint256 cutIndex = 0;

{{FACET_DEPLOYMENTS}}

        // Deploy BTR Diamond with initial cuts
        console.log("Deploying BTR Diamond with facets...");
        bytes memory diamondBytecode = abi.encodePacked(
            type(BTRDiamond).creationCode,
            abi.encode(deployer, treasury, initialCuts, address(0), "")
        );
        address diamondAddr = CREATEX.deployCreate3(
            {{DIAMOND_SALT}},
            diamondBytecode
        );
        require(diamondAddr == {{DIAMOND_EXPECTED_ADDRESS}}, "BTR Diamond address mismatch");
        console.log("BTR Diamond deployed at:", diamondAddr);

        // Initialize facets
        console.log("Initializing facets...");
        address diamond = diamondAddr;
{{INITIALIZATION_CALLS}}

        console.log("All contracts deployed successfully!");
        console.log("Summary:");
        console.log("  - BTR Token:", tokenAddr);
        console.log("  - BTR Diamond:", diamondAddr);
        console.log("  - Facets deployed:");
        console.logUint({{FACET_COUNT}});

        vm.stopBroadcast();
    }
}
