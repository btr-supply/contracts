// SPDX-License-Identifier: MIT
pragma solidity ^0.8.29;

/*
 * ⚠️  DO NOT EDIT THIS FILE MANUALLY ⚠️
 *
 * This file is auto-generated by scripts/generate_deployers.py
 * Any manual changes will be overwritten on the next build.
 *
 * To modify this test:
 * 1. Edit the template: templates/BaseDiamondTest.t.sol.tpl
 * 2. Update configuration: scripts/contracts.json
 * 3. Regenerate: python3 scripts/generate_deployers.py
 */

import "forge-std/Test.sol";
import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import {IERC1155Receiver} from "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol";
import {IERC165} from "@openzeppelin/contracts/utils/introspection/IERC165.sol";
import {ICreateX} from "@interfaces/ICreateX.sol";
import {BTRDiamond} from "@/BTRDiamond.sol";
import {BTR} from "@/BTR.sol";
import {IDiamond, IDiamondLoupe, FacetCut, Facet, FacetCutAction} from "@interfaces/IDiamond.sol";
import {CoreAddresses} from "@/BTRTypes.sol";
{{FACET_IMPORTS}}

/*
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@/         '@@@@/            /@@@/         '@@@@@@@@
 * @@@@@@@@/    /@@@    @@@@@@/    /@@@@@@@/    /@@@    @@@@@@@
 * @@@@@@@/           _@@@@@@/    /@@@@@@@/    /.     _@@@@@@@@
 * @@@@@@/    /@@@    '@@@@@/    /@@@@@@@/    /@@    @@@@@@@@@@
 * @@@@@/            ,@@@@@/    /@@@@@@@/    /@@@,    @@@@@@@@@
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *
 * @title BaseDiamondTest - Base test contract with embedded diamond deployment
 * @copyright 2025
 * @notice Provides a configured diamond environment for inheriting test contracts
 * @dev Directly deploys all contracts in setUp with embedded deployment logic
 * @author BTR Team
 */

abstract contract BaseDiamondTest is Test, IERC721Receiver, IERC1155Receiver {
    ICreateX constant CREATEX = ICreateX(0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed);

    // Test environment addresses
    address payable public diamond;
    address public admin;
    address public manager;
    address public treasury;
    address public keeper;
    address public user;
    address public alice;
    address public bob;

    // Deployed contract addresses
    address internal token;

    function setUp() public virtual {
        // Set up test accounts
        admin = vm.envOr("DEPLOYER", makeAddr("deployer"));
        manager = admin;
        treasury = admin;
        keeper = admin;
        user = makeAddr("user");
        alice = makeAddr("alice");
        bob = makeAddr("bob");

        // Deploy contracts using embedded logic
        vm.startPrank(admin);

        console.log("Setting up BTR Diamond test environment...");

        // Deploy BTR token first
        console.log("Deploying BTR token...");
        token = CREATEX.deployCreate3(
            {{BTR_SALT}},
            abi.encodePacked(
                type(BTR).creationCode,
                abi.encode("BTR Token", "BTR", admin)
            )
        );
        require(token == {{BTR_EXPECTED_ADDRESS}}, "BTR token address mismatch");
        console.log("BTR deployed at:", token);

        // Create initial cuts array
        FacetCut[] memory initialCuts = new FacetCut[]({{FACET_COUNT}});
        uint256 cutIndex = 0;

{{FACET_DEPLOYMENTS}}

        // Deploy BTR Diamond with initial cuts
        console.log("Deploying BTR Diamond with facets...");
        bytes memory diamondBytecode = abi.encodePacked(
            type(BTRDiamond).creationCode,
            abi.encode(admin, treasury, initialCuts, address(0), "")
        );
        diamond = payable(CREATEX.deployCreate3(
            {{DIAMOND_SALT}},
            diamondBytecode
        ));
        require(address(diamond) == {{DIAMOND_EXPECTED_ADDRESS}}, "BTR Diamond address mismatch");
        console.log("BTR Diamond deployed at:", address(diamond));

        // Initialize facets
        console.log("Initializing facets...");
{{INITIALIZATION_CALLS}}

        vm.stopPrank();

        console.log("Test environment setup complete!");
        console.log("Summary:");
        console.log("  - BTR Token:", token);
        console.log("  - BTR Diamond:", address(diamond));
        console.log("  - Facets deployed:");
        console.logUint({{FACET_COUNT}});

        // Verify deployment
        _verifyDiamondSetup();
    }

    function _verifyDiamondSetup() internal view {
        // Verify diamond has facets
        IDiamondLoupe loupe = IDiamondLoupe(address(diamond));
        Facet[] memory facets = loupe.facets();
        assertGt(facets.length, 0, "Diamond should have facets");

        // Verify diamond and token addresses
        assertNotEq(address(diamond), address(0), "Diamond should be deployed");
        assertNotEq(token, address(0), "Token should be deployed");

        // Verify expected addresses match (constants from contracts.json)
        assertEq(address(diamond), {{DIAMOND_EXPECTED_ADDRESS}}, "Diamond address should match expected");
        assertEq(token, {{BTR_EXPECTED_ADDRESS}}, "Token address should match expected");

        console.log("Diamond setup verification passed");
        console.log("  - Diamond facets:");
        console.logUint(facets.length);
        console.log("  - Diamond address verified:", address(diamond));
        console.log("  - Token address verified:", token);
    }

    // Standard ERC receiver implementations
    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {
        return this.onERC721Received.selector;
    }

    function onERC1155Received(address, address, uint256, uint256, bytes calldata)
        external
        pure
        override
        returns (bytes4)
    {
        return this.onERC1155Received.selector;
    }

    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata)
        external
        pure
        override
        returns (bytes4)
    {
        return this.onERC1155BatchReceived.selector;
    }

    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {
        return interfaceId == type(IERC165).interfaceId || interfaceId == type(IERC721Receiver).interfaceId
            || interfaceId == type(IERC1155Receiver).interfaceId;
    }

    // Helper functions for common test operations
    function _mockTokenBalance(address account, uint256 amount) internal {
        vm.mockCall(
            token,
            abi.encodeWithSignature("balanceOf(address)", account),
            abi.encode(amount)
        );
    }

    function _dealToken(address to, uint256 amount) internal {
        deal(token, to, amount);
    }

    function _dealEth(address to, uint256 amount) internal {
        deal(to, amount);
    }
}
