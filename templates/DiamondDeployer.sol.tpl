// SPDX-License-Identifier: MIT
pragma solidity ^0.8.29;

/*
 * ⚠️  DO NOT EDIT THIS FILE MANUALLY ⚠️
 *
 * This file is auto-generated by scripts/generate_deployers.py
 * Any manual changes will be overwritten on the next build.
 *
 * To modify this contract:
 * 1. Edit the template: scripts/templates/DiamondDeployer.sol.tpl
 * 2. Update configuration: scripts/contracts.json
 * 3. Regenerate: python3 scripts/generate_deployers.py
 */

import {ICreateX} from "@interfaces/ICreateX.sol";
import {BTRDiamond} from "@/BTRDiamond.sol";
import {IDiamond, IDiamondCut, FacetCut, FacetCutAction} from "@interfaces/IDiamond.sol";

/**
 * @title BTRDiamondDeployer
 * @notice Self-destructing deployer for BTRDiamond
 * @dev Deploys BTRDiamond via CreateX with initial cuts, then self-destructs
 */
contract BTRDiamondDeployer {
    ICreateX constant CREATEX = ICreateX(0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed);
    bytes32 constant SALT = {{SALT}};
    address constant EXPECTED_ADDR = {{EXPECTED_ADDRESS}};

    constructor(
        address admin,
        address treasury,
        FacetCut[] memory initialCuts
    ) {
        bytes memory bytecode = abi.encodePacked(
            type(BTRDiamond).creationCode,
            abi.encode(admin, treasury, initialCuts, address(0), "")
        );
        address deployed = CREATEX.deployCreate3(SALT, bytecode);
        require(deployed == EXPECTED_ADDR, "BTRDiamond deployment address mismatch");
        require(deployed != address(0), "BTRDiamond deployment failed");
        selfdestruct(payable(msg.sender));
    }
}
