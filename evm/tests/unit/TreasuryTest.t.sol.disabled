// SPDX-License-Identifier: MIT
pragma solidity ^0.8.29;

import {BTRErrors as Errors} from "@libraries/BTREvents.sol";
import {Fees, VaultInitParams, Range, RebalanceParams, RangeParams} from "@/BTRTypes.sol";
import {BTRUtils as U} from "@libraries/BTRUtils.sol";
import {LibMaths as M} from "@libraries/LibMaths.sol";
import {LibTreasury as T} from "@libraries/LibTreasury.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {BaseDiamondTest} from "../BaseDiamondTest.t.sol";
import {ALMInfoFacet} from "@facets/ALMInfoFacet.sol";
import {ALMProtectedFacet} from "@facets/ALMProtectedFacet.sol";
import {ALMUserFacet} from "@facets/ALMUserFacet.sol";
import {MockERC20} from "../mocks/MockERC20.sol";
import {Test} from "forge-std/Test.sol";
import {TreasuryFacet} from "@facets/TreasuryFacet.sol";

/*
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@/         '@@@@/            /@@@/         '@@@@@@@@
 * @@@@@@@@/    /@@@    @@@@@@/    /@@@@@@@/    /@@@    @@@@@@@
 * @@@@@@@/           _@@@@@@/    /@@@@@@@/    /.     _@@@@@@@@
 * @@@@@@/    /@@@    '@@@@@/    /@@@@@@@/    /@@    @@@@@@@@@@
 * @@@@@/            ,@@@@@/    /@@@@@@@/    /@@@,    @@@@@@@@@
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *
 * @title Treasury Test - Unit tests for TreasuryFacet
 * @copyright 2025
 * @notice Verifies TreasuryFacet functions like setting fees, treasury address, and collecting fees
 * @dev Tests treasury operations and accounting. Validates `onlyAdmin`/`onlyManager`/`onlyTreasury` modifiers
 * @author BTR Team
 */

contract TreasuryTest is BaseDiamondTest {
    using U for uint32;
    using M for uint256;

    TreasuryFacet public treasuryFacet;
    MockERC20 public token0;
    MockERC20 public token1;
    uint32 public vid;
    ALMUserFacet public almUser;
    ALMProtectedFacet public almProtected;
    ALMInfoFacet public almInfo;

    // Test constants
    uint16 internal constant MAX_FEE_BPS = 5000; // 50%
    address internal collector = makeAddr("collector");

    function setUp() public override {
        super.setUp();
        almUser = ALMUserFacet(diamond);
        almProtected = ALMProtectedFacet(diamond);
        almInfo = ALMInfoFacet(diamond);
        token0 = new MockERC20("T0", "T0", 18);
        token1 = new MockERC20("T1", "T1", 18);
        if (address(token0) > address(token1)) {
            (token0, token1) = (token1, token0);
        }

        treasuryFacet = TreasuryFacet(diamond);

        treasuryFacet.initializeTreasury();
        vm.prank(manager);
        treasuryFacet.setDefaultFees(_makeFees(500, 300, 200, 2000, 100));
        token0.mint(address(this), 1e24);
        token1.mint(address(this), 1e24);
        token0.approve(address(diamond), 1e24);
        token1.approve(address(diamond), 1e24);
        _createVault();

        vm.startPrank(admin);
        treasuryFacet.setCollector(collector);
        vm.stopPrank();
    }

    function _makeFees(uint16 _e, uint16 _x, uint16 _m, uint16 _p, uint16 _f) internal pure returns (Fees memory) {
        return Fees({
            entry: _e,
            exit: _x,
            mgmt: _m,
            perf: _p,
            flash: _f,
            updatedAt: uint64(block.timestamp),
            __gap: [bytes32(0), bytes32(0), bytes32(0), bytes32(0), bytes32(0), bytes32(0), bytes32(0), bytes32(0)]
        });
    }

    function _createVault() internal {
        VaultInitParams memory params = VaultInitParams({
            name: "TestV",
            symbol: "TV",
            token0: address(token0),
            token1: address(token1),
            init0: 1e22,
            init1: 1e22,
            initShares: 1e22
        });
        token0.approve(address(diamond), 1e22);
        token1.approve(address(diamond), 1e22);
        vm.prank(manager);
        vid = almUser.createVault(params);
    }

    function testEntryAndExitFees() public {
        uint256 dep = 1e21;

        // Entry fee
        vm.prank(manager);
        treasuryFacet.setAlmVaultFees(vid, _makeFees(1000, 0, 0, 0, 0));
        token0.approve(address(diamond), dep);
        token1.approve(address(diamond), dep);
        (, uint256 expEntry0, uint256 expEntry1) = almUser.deposit(vid, dep, dep, address(this));
        assertEq(treasuryFacet.almPendingFees(vid, IERC20(address(token0))), expEntry0, "entry fee token0");
        assertEq(treasuryFacet.almPendingFees(vid, IERC20(address(token1))), expEntry1, "entry fee token1");

        // Exit fee
        vm.prank(manager);
        treasuryFacet.setAlmVaultFees(vid, _makeFees(0, 1000, 0, 0, 0));
        token0.approve(address(diamond), dep);
        token1.approve(address(diamond), dep);
        (uint256 mintedShares,,) = almUser.deposit(vid, dep, dep, address(this));
        vm.prank(treasury);
        almUser.collectFees(vid);
        (,, uint256 expExit0, uint256 expExit1) = almUser.withdraw(vid, mintedShares / 2, address(this));
        assertEq(treasuryFacet.almPendingFees(vid, IERC20(address(token0))), expExit0, "exit fee token0");
        assertEq(treasuryFacet.almPendingFees(vid, IERC20(address(token1))), expExit1, "exit fee token1");
    }

    function testAccrualManagementAndPerformance() public {
        vm.prank(manager);
        treasuryFacet.setAlmVaultFees(vid, _makeFees(0, 0, 200, 3000, 0));
        almUser.deposit(vid, 1e21, 1e21, address(this));
        almUser.collectFees(vid); // reset pending
        vm.warp(block.timestamp + 7889400);
        token0.mint(address(diamond), 100e18);
        token1.mint(address(diamond), 50e18);

        RebalanceParams memory empty = RebalanceParams({
            ranges: new RangeParams[](0),
            swapInputs: new address[](0),
            swapRouters: new address[](0),
            swapData: new bytes[](0)
        });
        vm.prank(keeper);
        almUser.rebalance(vid, empty);

        uint256 acc0 = treasuryFacet.almVaultAccruedFees(vid, IERC20(address(token0)));
        uint256 expMgmt0 = (1e21 * 200) / 10000 / 4;
        uint256 expPerf0 = (100e18 * 3000) / 10000;
        assertApproxEqRel(acc0, expMgmt0 + expPerf0, 1e16, "accrual token0");
    }

    function testCollectResetsAndTransferst() public {
        vm.prank(manager);
        treasuryFacet.setAlmVaultFees(vid, _makeFees(500, 300, 200, 2000, 0));
        almUser.deposit(vid, 1e21, 1e21, address(this));
        vm.prank(treasury);
        (uint256 c0, uint256 c1) = almUser.collectFees(vid);

        assertEq(treasuryFacet.almPendingFees(vid, IERC20(address(token0))), 0, "pending reset token0");
        assertEq(treasuryFacet.almPendingFees(vid, IERC20(address(token1))), 0, "pending reset token1");
        assertEq(token0.balanceOf(address(treasury)), c0, "transfer token0");
        assertEq(token1.balanceOf(address(treasury)), c1, "transfer token1");
    }

    function testAccessControlsAndInitialization() public {
        vm.prank(admin);
        treasuryFacet.setCollector(address(0x1234));
        assertEq(treasuryFacet.collector(), address(0x1234));

        vm.prank(user);
        vm.expectRevert();
        treasuryFacet.setCollector(address(0));
        vm.prank(user);
        vm.expectRevert();
        treasuryFacet.setAlmVaultFees(_makeFees(0, 0, 0, 0, 0));
        vm.prank(manager);
        vm.expectRevert();
        treasuryFacet.setDefaultFees(_makeFees(10000, 0, 0, 0, 0));

        vm.prank(admin);
        treasuryFacet.initializeTreasury();
    }

    // --- INITIALIZATION TESTS ---

    function testTreasuryInitialization() public {
        assertEq(treasuryFacet.collector(), collector, "Collector should be set");
    }

    function testSetCollector() public {
        address newCollector = makeAddr("newCollector");

        vm.prank(admin);
        treasuryFacet.setCollector(newCollector);

        assertEq(treasuryFacet.collector(), newCollector, "Collector should be updated");
    }

    function testSetCollectorZeroAddress() public {
        vm.expectRevert(Errors.ZeroAddress.selector);
        vm.prank(admin);
        treasuryFacet.setCollector(address(0));
    }

    // --- FEE VALIDATION TESTS ---

    function testValidateFees() public {
        Fees memory validFees = Fees({
            entry: 100, // 1%
            exit: 200, // 2%
            mgmt: 300, // 3%
            perf: 400, // 4%
            flash: 500, // 5%
            updatedAt: uint64(block.timestamp)
        });

        treasuryFacet.validateFees(validFees); // Should not revert
    }

    function testValidateFeesEntryTooHigh() public {
        Fees memory invalidFees = Fees({
            entry: 5001, // 50.01% - too high
            exit: 200,
            mgmt: 300,
            perf: 400,
            flash: 500,
            updatedAt: uint64(block.timestamp)
        });

        vm.expectRevert();
        treasuryFacet.validateFees(invalidFees);
    }

    function testValidateFeesExitTooHigh() public {
        Fees memory invalidFees = Fees({
            entry: 100,
            exit: 5001, // 50.01% - too high
            mgmt: 300,
            perf: 400,
            flash: 500,
            updatedAt: uint64(block.timestamp)
        });

        vm.expectRevert();
        treasuryFacet.validateFees(invalidFees);
    }

    function testValidateFeesMgmtTooHigh() public {
        Fees memory invalidFees = Fees({
            entry: 100,
            exit: 200,
            mgmt: 5001, // 50.01% - too high
            perf: 400,
            flash: 500,
            updatedAt: uint64(block.timestamp)
        });

        vm.expectRevert();
        treasuryFacet.validateFees(invalidFees);
    }

    function testValidateFeesPerfTooHigh() public {
        Fees memory invalidFees = Fees({
            entry: 100,
            exit: 200,
            mgmt: 300,
            perf: 5001, // 50.01% - too high
            flash: 500,
            updatedAt: uint64(block.timestamp)
        });

        vm.expectRevert();
        treasuryFacet.validateFees(invalidFees);
    }

    function testValidateFeesFlashTooHigh() public {
        Fees memory invalidFees = Fees({
            entry: 100,
            exit: 200,
            mgmt: 300,
            perf: 400,
            flash: 5001, // 50.01% - too high
            updatedAt: uint64(block.timestamp)
        });

        vm.expectRevert();
        treasuryFacet.validateFees(invalidFees);
    }

    // --- DEFAULT FEES TESTS ---

    function testSetDefaultFees() public {
        Fees memory newDefaultFees = Fees({
            entry: 150, // 1.5%
            exit: 250, // 2.5%
            mgmt: 350, // 3.5%
            perf: 450, // 4.5%
            flash: 550, // 5.5%
            updatedAt: uint64(block.timestamp)
        });

        vm.prank(admin);
        treasuryFacet.setDefaultFees(newDefaultFees);

        Fees memory retrievedFees = treasuryFacet.defaultFees();
        assertEq(retrievedFees.entry, 150, "Entry fee should be updated");
        assertEq(retrievedFees.exit, 250, "Exit fee should be updated");
        assertEq(retrievedFees.mgmt, 350, "Management fee should be updated");
        assertEq(retrievedFees.perf, 450, "Performance fee should be updated");
        assertEq(retrievedFees.flash, 550, "Flash fee should be updated");
    }

    function testDefaultFeesInitialState() public {
        Fees memory defaultFees = treasuryFacet.defaultFees();
        // Default fees should be zero initially
        assertEq(defaultFees.entry, 0, "Initial entry fee should be 0");
        assertEq(defaultFees.exit, 0, "Initial exit fee should be 0");
        assertEq(defaultFees.mgmt, 0, "Initial management fee should be 0");
        assertEq(defaultFees.perf, 0, "Initial performance fee should be 0");
        assertEq(defaultFees.flash, 0, "Initial flash fee should be 0");
    }

    // --- ALM VAULT FEES TESTS ---

    function testSetAlmVaultFees() public {
        uint32 vaultId = 1;
        Fees memory vaultFees =
            Fees({entry: 100, exit: 200, mgmt: 300, perf: 400, flash: 500, updatedAt: uint64(block.timestamp)});

        vm.prank(manager);
        treasuryFacet.setAlmVaultFees(vaultId, vaultFees);

        Fees memory retrievedFees = treasuryFacet.almVaultFees(vaultId);
        assertEq(retrievedFees.entry, 100, "Vault entry fee should be set");
        assertEq(retrievedFees.exit, 200, "Vault exit fee should be set");
        assertEq(retrievedFees.mgmt, 300, "Vault management fee should be set");
        assertEq(retrievedFees.perf, 400, "Vault performance fee should be set");
        assertEq(retrievedFees.flash, 500, "Vault flash fee should be set");
    }

    function testAlmVaultFeesInheritDefault() public {
        uint32 vaultId = 2;

        // Set default fees first
        Fees memory defaultFees =
            Fees({entry: 50, exit: 100, mgmt: 150, perf: 200, flash: 250, updatedAt: uint64(block.timestamp)});

        vm.startPrank(admin);
        treasuryFacet.setDefaultFees(defaultFees);
        vm.stopPrank();

        // New vault should inherit default fees
        Fees memory vaultFees = treasuryFacet.almVaultFees(vaultId);
        // NB: This test might need adjustment based on actual implementation
        // The vault might start with zero fees until explicitly set
    }

    // --- ACCESS CONTROL TESTS ---

    function testOnlyAdminCanSetCollector() public {
        address newCollector = makeAddr("newCollector");

        vm.expectRevert();
        vm.prank(user);
        treasuryFacet.setCollector(newCollector);
    }

    function testOnlyAdminCanSetDefaultFees() public {
        Fees memory fees =
            Fees({entry: 100, exit: 200, mgmt: 300, perf: 400, flash: 500, updatedAt: uint64(block.timestamp)});

        vm.expectRevert();
        vm.prank(user);
        treasuryFacet.setDefaultFees(fees);
    }

    function testOnlyManagerCanSetAlmVaultFees() public {
        uint32 vaultId = 1;
        Fees memory fees =
            Fees({entry: 100, exit: 200, mgmt: 300, perf: 400, flash: 500, updatedAt: uint64(block.timestamp)});

        vm.expectRevert();
        vm.prank(user);
        treasuryFacet.setAlmVaultFees(vaultId, fees);
    }

    function testOnlyTreasuryCanCollectFees() public {
        uint32 vaultId = 1;

        vm.expectRevert();
        vm.prank(user);
        treasuryFacet.collectAlmFees(vaultId);
    }

    // --- LIBRARY FUNCTION TESTS ---

    function testLibTreasuryPreviewPerfFees() public {
        uint256 lpFee0 = 1000e18; // 1000 tokens
        uint256 lpFee1 = 2000e18; // 2000 tokens
        uint16 perfFeeBp = 2000; // 20%

        // Calculate expected performance fees
        uint256 expectedPerfFee0 = lpFee0.bpUp(perfFeeBp);
        uint256 expectedPerfFee1 = lpFee1.bpUp(perfFeeBp);

        assertTrue(expectedPerfFee0 > lpFee0.bpDown(perfFeeBp), "Performance fee should round up");
        assertTrue(expectedPerfFee1 > lpFee1.bpDown(perfFeeBp), "Performance fee should round up");
    }

    function testLibTreasuryFeeCalculations() public {
        uint256 amount = 10000e18;
        uint16 feeBp = 500; // 5%

        uint256 feeDown = amount.bpDown(feeBp);
        uint256 feeUp = amount.bpUp(feeBp);

        assertEq(feeDown, 500e18, "5% of 10000 should be 500 (rounded down)");
        assertTrue(feeUp >= feeDown, "Up rounding should be >= down rounding");
    }

    // --- EDGE CASES TESTS ---

    function testFeesWithZeroValues() public {
        Fees memory zeroFees = Fees({entry: 0, exit: 0, mgmt: 0, perf: 0, flash: 0, updatedAt: uint64(block.timestamp)});

        treasuryFacet.validateFees(zeroFees); // Should not revert

        vm.prank(admin);
        treasuryFacet.setDefaultFees(zeroFees);

        Fees memory retrievedFees = treasuryFacet.defaultFees();
        assertEq(retrievedFees.entry, 0, "Zero entry fee should be valid");
    }

    function testFeesWithMaxValues() public {
        Fees memory maxFees = Fees({
            entry: MAX_FEE_BPS,
            exit: MAX_FEE_BPS,
            mgmt: MAX_FEE_BPS,
            perf: MAX_FEE_BPS,
            flash: MAX_FEE_BPS,
            updatedAt: uint64(block.timestamp)
        });

        treasuryFacet.validateFees(maxFees); // Should not revert

        vm.prank(admin);
        treasuryFacet.setDefaultFees(maxFees);

        Fees memory retrievedFees = treasuryFacet.defaultFees();
        assertEq(retrievedFees.entry, MAX_FEE_BPS, "Max entry fee should be valid");
    }

    function testUpdatedAtTimestamp() public {
        uint64 currentTime = uint64(block.timestamp);

        Fees memory fees = Fees({entry: 100, exit: 200, mgmt: 300, perf: 400, flash: 500, updatedAt: currentTime});

        vm.prank(admin);
        treasuryFacet.setDefaultFees(fees);

        Fees memory retrievedFees = treasuryFacet.defaultFees();
        assertEq(retrievedFees.updatedAt, currentTime, "UpdatedAt timestamp should be preserved");
    }

    // --- INTEGRATION TESTS ---

    function testCompleteFeesWorkflow() public {
        // 1. Set default fees
        Fees memory defaultFees = Fees({
            entry: 25, // 0.25%
            exit: 50, // 0.5%
            mgmt: 100, // 1%
            perf: 1000, // 10%
            flash: 10, // 0.1%
            updatedAt: uint64(block.timestamp)
        });

        vm.prank(admin);
        treasuryFacet.setDefaultFees(defaultFees);

        // 2. Set specific vault fees
        uint32 vaultId = 1;
        Fees memory vaultFees = Fees({
            entry: 50, // 0.5%
            exit: 75, // 0.75%
            mgmt: 150, // 1.5%
            perf: 1500, // 15%
            flash: 15, // 0.15%
            updatedAt: uint64(block.timestamp)
        });

        vm.prank(manager);
        treasuryFacet.setAlmVaultFees(vaultId, vaultFees);

        // 3. Verify both default and vault-specific fees
        Fees memory retrievedDefault = treasuryFacet.defaultFees();
        Fees memory retrievedVault = treasuryFacet.almVaultFees(vaultId);

        assertEq(retrievedDefault.entry, 25, "Default entry fee should be set");
        assertEq(retrievedVault.entry, 50, "Vault entry fee should be different from default");

        assertEq(retrievedDefault.perf, 1000, "Default performance fee should be set");
        assertEq(retrievedVault.perf, 1500, "Vault performance fee should be different from default");
    }

    // --- FUZZ TESTS ---

    function testFuzzValidateFees(uint16 entry, uint16 exit, uint16 mgmt, uint16 perf, uint16 flash) public {
        vm.assume(entry <= MAX_FEE_BPS);
        vm.assume(exit <= MAX_FEE_BPS);
        vm.assume(mgmt <= MAX_FEE_BPS);
        vm.assume(perf <= MAX_FEE_BPS);
        vm.assume(flash <= MAX_FEE_BPS);

        Fees memory fees =
            Fees({entry: entry, exit: exit, mgmt: mgmt, perf: perf, flash: flash, updatedAt: uint64(block.timestamp)});

        treasuryFacet.validateFees(fees); // Should not revert for valid fees
    }

    function testFuzzInvalidFees(uint16 entry) public {
        vm.assume(entry > MAX_FEE_BPS);

        Fees memory fees = Fees({entry: entry, exit: 0, mgmt: 0, perf: 0, flash: 0, updatedAt: uint64(block.timestamp)});

        vm.expectRevert();
        treasuryFacet.validateFees(fees);
    }

    function testFuzzFeeCalculations(uint256 amount, uint16 feeBp) public {
        vm.assume(amount <= type(uint128).max); // Avoid overflow
        vm.assume(feeBp <= M.BPS); // Valid basis points

        uint256 feeDown = amount.bpDown(feeBp);
        uint256 feeUp = amount.bpUp(feeBp);

        assertTrue(feeUp >= feeDown, "Up rounding should be >= down rounding");
        assertTrue(feeDown <= amount, "Fee should not exceed principal");

        if (feeBp == 0) {
            assertEq(feeDown, 0, "Zero fee rate should result in zero fee");
            assertEq(feeUp, 0, "Zero fee rate should result in zero fee");
        }

        if (feeBp == M.BPS) {
            assertEq(feeDown, amount, "100% fee rate should equal amount");
        }
    }

    // --- PERFORMANCE TESTS ---

    function testGasUsageSetDefaultFees() public {
        Fees memory fees =
            Fees({entry: 100, exit: 200, mgmt: 300, perf: 400, flash: 500, updatedAt: uint64(block.timestamp)});

        vm.prank(admin);
        uint256 gasBefore = gasleft();
        treasuryFacet.setDefaultFees(fees);
        uint256 gasUsed = gasBefore - gasleft();

        assertTrue(gasUsed < 100000, "Gas usage should be reasonable for setting default fees");
    }

    function testGasUsageSetVaultFees() public {
        uint32 vaultId = 1;
        Fees memory fees =
            Fees({entry: 100, exit: 200, mgmt: 300, perf: 400, flash: 500, updatedAt: uint64(block.timestamp)});

        vm.prank(manager);
        uint256 gasBefore = gasleft();
        treasuryFacet.setAlmVaultFees(vaultId, fees);
        uint256 gasUsed = gasBefore - gasleft();

        assertTrue(gasUsed < 100000, "Gas usage should be reasonable for setting vault fees");
    }
}
