// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

import "forge-std/Script.sol";
import "@interfaces/ICreateX.sol";

/**
 * @title VerifyMinerScript
 * @notice Script to verify that the salts generated by createXcrunch tools produce the expected addresses
 */
contract VerifyMinerScript is Script {
    address public createXAddress = vm.envOr("CREATEX", address(0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed));
    address public deployer = vm.envOr("DEPLOYER", address(0x57b3771F6b772C52E81646Aa007D1Ab28d91B3Fe));

    // Test salts and their expected addresses
    struct TestCase {
        bytes32 salt;
        address expectedAddress;
    }
    
    // Initialize test cases individually to avoid memory to storage copying error
    TestCase[] public testCases;
    
    // Constructor to initialize test cases
    constructor() {
        // Add test cases one by one instead of using an array literal
        testCases.push(TestCase(0x8300000000000000000000000000000000000000000000000000000000000000, 0x002c0a74aDCa91f09BC1B4C4dD181377fD724604));
        testCases.push(TestCase(0xcac62d0000000000000000000000000000000000000000000000000000000000, 0x00A56d359fF7458b58Df876aC1EF648C21f12124));
        testCases.push(TestCase(0xa1c72d0000000000000000000000000000000000000000000000000000000000, 0x003f08fFBf7e8E91537e446E2bE19a4b0e527e5E));
        testCases.push(TestCase(0x9b093d0000000000000000000000000000000000000000000000000000000000, 0x0056A093ee9f4980a31D3a9D53BDD04BD7615876));
    }

    function runTests() public view {
        ICreateX createX = ICreateX(createXAddress);
        
        console.log("Using CreateX at:", createXAddress);
        console.log("Using deployer:", deployer);
        
        for (uint i = 0; i < testCases.length; i++) {
            bytes32 salt = testCases[i].salt;
            address expectedAddress = testCases[i].expectedAddress;
            
            // Compute the address using CreateX
            address computedAddress = createX.computeCreate3Address(salt, deployer);
            
            // Log results
            console.log("\nTest Case", i + 1);
            console.log("Salt:");
            console.logBytes32(salt);
            console.log("Expected address:", expectedAddress);
            console.log("Computed address:", computedAddress);
            
            // Verify the address matches
            if (computedAddress == expectedAddress) {
                console.log("OK - Verification successful!");
            } else {
                console.log("KO - Verification failed!");
            }
        }
    }
}