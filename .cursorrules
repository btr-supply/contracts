---
description: Project structure and development guidelines for multi-chain smart contract development
globs:
  - "*"
---

# Project Structure

### Multi-Chain Architecture
- EVM code in `./evm` with `foundry.toml` configuration
- Solana code in `./solana`
- Sui code in `./sui`

### Build Organization
- Project-wide scripts in `./scripts`
- EVM deployment scripts in `./evm/scripts`
- Diamond pattern facets in `./evm/src/facets`

### Diamond Architecture (EVM)
- Uses Diamond pattern (EIP-2535) for modularity
- Three-step compilation via `./scripts/build.sh`:
  1. Compile facets from `./evm/src/facets`
  2. Generate diamond deployment script
  3. Compile all components together

# Development Guidelines

### Core Principles
- Implement minimum viable solutions
- Choose narrow scope interpretations
- Require explicit approval for [MAJOR] scope changes, otherwise, proceed with implementations on your own
- Use only `make build` for builds
- Never compile solidity with via-ir, never change build parameters unless explicitly asked.
- Only build with "make build" if available. Do not skip any files in the build process.

### Build Workflow
- **Installation:**
  ```bash
  make install-deps  # Installs system deps, Python packages, and git hooks
  ```
- **Formatting:**
  ```bash
  make format        # Runs forge fmt and custom formatters
  make python-lint-fix  # Fixes Python code style
  ```
- **Testing:**
  ```bash
  make test         # Runs forge test suite
  ```
- **Releasing:**
  ```bash
  make publish-patch  # Increments patch version (0.1.0 -> 0.1.1)
  make publish-minor  # Increments minor version (0.1.1 -> 0.2.0)
  make publish-major  # Increments major version (0.2.0 -> 1.0.0)
  ```

### Change Management
- Classify changes as:
  - [MINOR] (1-8 lines)
  - [MODERATE] (8-32 lines)
  - [MAJOR] (32+ lines)
- Flag [COMPLEX] changes affecting 3+ files
- Provide implementation plans for [MAJOR] changes
- Document potential side effects

### Development Workflow
- Follow strict cycle: propose → approve → implement → review
- Pause after each [MAJOR] logical unit for approval, proceed autonomously otherwise
- Summarize changes and remaining work
- Do not request permission for cross-component changes unless major refactoring or deletion

### AI Agent Guidelines
- Maintain consistent code style
- Respect project conventions
- Provide clear reasoning for suggestions
- Ask clarifying questions when needed
- Break down complex tasks
- Validate assumptions
- Consider edge cases
- Focus on maintainability
- Document key decisions
- Highlight potential risks

### Communication Protocol
- Use clear status indicators ([COMPLETE], [PENDING], etc.)
- Provide progress summaries
- Request explicit confirmations
- Flag blockers immediately
- Document key assumptions
- Maintain audit trail
